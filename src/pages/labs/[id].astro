---
import { getCollection } from 'astro:content';
import HeroSection from '@/components/HeroSection.astro';
import Layout from '@/layouts/Base.astro';
import TechnologyBadges from '@/components/TechnologyBadges.astro';
import { formatRelativeTime } from '@/utils/githubHelpers';

export async function getStaticPaths() {
  const labs = await getCollection('labs');
  return labs.map((lab) => ({
    params: { id: lab.id },
    props: lab,
  }));
}

const lab = Astro.props;
const {
  title,
  description,
  readmeHtml,
  githubUrl,
  isPrivate,
  category,
  status,
  technologies,
  repoData,
  contributors,
  languages,
} = lab.data;

// Get top languages for display
const topLanguages = Object.entries(languages)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 5)
  .map(([name, bytes]) => ({ name, bytes }));
---

<Layout title={title} description={description}>
  <HeroSection title={title} preamble={description} />

  <section class="lab-detail-section">
    <div class="content-wrapper">
      <div class="main-content">
        <!-- Brief intro section -->
        <div class="intro-section">
          <p class="intro-text">{description}</p>
        </div>

        <!-- README Content -->
        {
          readmeHtml && (
            <div class="readme-section">
              {/* eslint-disable-next-line astro/no-set-html-directive */}
              <div class="readme-content" set:html={readmeHtml} />
            </div>
          )
        }

        <!-- Technology Detection Section -->
        {
          (technologies.frameworks.length > 0 ||
            technologies.languages.length > 0 ||
            technologies.services.length > 0 ||
            technologies.databases.length > 0 ||
            technologies.deployment.length > 0 ||
            technologies.tools.length > 0 ||
            technologies.apis.length > 0) && <TechnologyBadges technologies={technologies} />
        }
      </div>

      <div class="sidebar">
        <!-- Category -->
        {
          category && (
            <div class="info-card">
              <h3>Kategori</h3>
              <p>{category}</p>
            </div>
          )
        }

        <!-- Status -->
        {
          status && (
            <div class="info-card">
              <h3>Status</h3>
              <p class:list={['status', `status-${status}`]}>{status}</p>
            </div>
          )
        }

        <!-- GitHub Link -->
        <div class="info-card">
          <h3>GitHub</h3>
          {
            isPrivate ? (
              <p class="private-repo">Private repository</p>
            ) : (
              <a
                href={githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`View ${title} on GitHub`}
              >
                Se på GitHub →
              </a>
            )
          }
        </div>

        <!-- Repository Stats -->
        <div class="info-card">
          <h3>Statistikk</h3>
          <div class="stats-grid">
            <div class="stat-item">
              <span class="stat-value">{repoData.stargazersCount}</span>
              <span class="stat-label">stars</span>
            </div>
            <div class="stat-item">
              <span class="stat-value">{repoData.forksCount}</span>
              <span class="stat-label">forks</span>
            </div>
            <div class="stat-item">
              <span class="stat-value">{repoData.openIssuesCount}</span>
              <span class="stat-label">issues</span>
            </div>
          </div>
        </div>

        <!-- Language Breakdown -->
        {
          topLanguages.length > 0 && (
            <div class="info-card">
              <h3>Programmeringsspråk</h3>
              <div class="language-breakdown">
                {topLanguages.map((lang) => (
                  <div class="language-item">
                    <span class="language-name">{lang.name}</span>
                    <span class="language-bytes">{lang.bytes.toLocaleString()} bytes</span>
                  </div>
                ))}
              </div>
            </div>
          )
        }

        <!-- Contributors -->
        {
          contributors && contributors.length > 0 && (
            <div class="info-card">
              <h3>Contributors</h3>
              <div class="contributors">
                {contributors.slice(0, 8).map((contributor) => (
                  <a
                    href={`https://github.com/${contributor.login}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="contributor"
                    title={`${contributor.login} (${contributor.contributions} contributions)`}
                    aria-label={`View ${contributor.login}'s GitHub profile`}
                  >
                    <img src={contributor.avatarUrl} alt={`${contributor.login}'s avatar`} />
                  </a>
                ))}
                {contributors.length > 8 && (
                  <span class="more-contributors">+{contributors.length - 8} more</span>
                )}
              </div>
            </div>
          )
        }

        <!-- Repository Info -->
        <div class="info-card">
          <h3>Repository Info</h3>
          <div class="repo-info">
            <div class="info-item">
              <span class="info-label">Hovedprogrammeringsspråk</span>
              <span class="info-value">{repoData.language || 'N/A'}</span>
            </div>
            <div class="info-item">
              <span class="info-label">Standard branch</span>
              <span class="info-value">{repoData.defaultBranch}</span>
            </div>
            <div class="info-item">
              <span class="info-label">Opprettet</span>
              <span class="info-value"
                >{new Date(repoData.createdAt).toLocaleDateString('nb-NO')}</span
              >
            </div>
            <div class="info-item">
              <span class="info-label">Sist oppdatert</span>
              <span class="info-value">{formatRelativeTime(repoData.updatedAt)}</span>
            </div>
          </div>
        </div>

        <!-- Homepage Link -->
        {
          repoData.homepage && (
            <div class="info-card">
              <h3>Homepage</h3>
              <a
                href={repoData.homepage}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`Visit ${title} homepage`}
              >
                Se homepage →
              </a>
            </div>
          )
        }
      </div>
    </div>
  </section>
</Layout>

<style>
  .lab-detail-section {
    padding: 2rem 0;
  }

  .content-wrapper {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;

    @media (--md) {
      grid-template-columns: 2fr 1fr;
    }
  }

  .main-content {
    :global(h1) {
      font-size: var(--fs-heading-l);
      margin-bottom: 2rem;
    }

    :global(h2) {
      font-size: var(--fs-heading-m);
      margin-top: 3rem;
      margin-bottom: 1.5rem;
    }

    :global(h3) {
      font-size: var(--fs-heading-s);
      margin-top: 2rem;
      margin-bottom: 1rem;
    }

    :global(p) {
      font-size: var(--fs-body-l);
      line-height: var(--line-height-l);
      margin-bottom: 1.5rem;
    }

    :global(ul) {
      font-size: var(--fs-body-l);
      line-height: var(--line-height-l);
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }

    :global(ol) {
      font-size: var(--fs-body-l);
      line-height: var(--line-height-l);
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }

    :global(li) {
      margin-bottom: 0.5rem;
    }

    :global(code) {
      background-color: var(--color-secondary-shade);
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-family: 'JetBrains Mono', monospace;
    }

    :global(pre) {
      background-color: var(--color-secondary-shade);
      padding: 1rem;
      border-radius: 0.5rem;
      overflow-x: auto;
      margin-bottom: 1.5rem;
    }

    :global(pre code) {
      background: none;
      padding: 0;
    }

    :global(blockquote) {
      border-left: 4px solid var(--color-accent);
      padding-left: 1rem;
      margin: 1rem 0;
      font-style: italic;
      color: var(--color-gray);
    }

    :global(a) {
      color: var(--color-accent);
      text-decoration: none;
    }

    :global(a:hover) {
      text-decoration: underline;
    }

    :global(table) {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1rem;
    }

    :global(th),
    :global(td) {
      border: 1px solid var(--color-dark-blue);
      padding: 0.5rem;
      text-align: left;
    }

    :global(th) {
      background-color: var(--color-secondary-shade);
      font-weight: var(--font-weight-semibold);
    }
  }

  .intro-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--color-dark-blue);
  }

  .intro-text {
    font-size: var(--fs-body-l);
    color: var(--color-gray);
    margin: 0;
  }

  .readme-section {
    margin-bottom: 2rem;
  }

  .readme-content {
    background-color: var(--color-primary);
    border: 1px solid var(--color-dark-blue);
    border-radius: 0.5rem;
    padding: 2rem;
  }

  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .info-card {
    background-color: var(--color-secondary-shade);
    border: 2px solid var(--color-dark-blue);
    padding: 1.5rem;
    border-radius: 0.5rem;

    h3 {
      font-size: var(--fs-body-m);
      font-weight: var(--font-weight-medium);
      margin: 0 0 0.5rem 0;
      color: var(--color-accent);
    }

    p {
      margin: 0;
      font-size: var(--fs-body-m);
    }

    a {
      color: var(--color-red);
      text-decoration: none;
      font-weight: var(--font-weight-medium);

      &:hover {
        text-decoration: underline;
      }
    }
  }

  .private-repo {
    color: var(--color-gray);
    font-style: italic;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .stat-value {
    font-size: var(--fs-body-l);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text);
  }

  .stat-label {
    font-size: var(--fs-body-s);
    color: var(--color-gray);
  }

  .language-breakdown {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .language-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .language-name {
    font-size: var(--fs-body-s);
    color: var(--color-text);
  }

  .language-bytes {
    font-size: var(--fs-body-s);
    color: var(--color-gray);
  }

  .contributors {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
  }

  .contributor {
    display: block;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    overflow: hidden;
    transition: transform 0.2s ease;
  }

  .contributor:hover {
    transform: scale(1.1);
  }

  .contributor img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .more-contributors {
    font-size: var(--fs-body-s);
    color: var(--color-gray);
    font-style: italic;
  }

  .repo-info {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .info-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .info-label {
    font-size: var(--fs-body-s);
    color: var(--color-gray);
    font-weight: var(--font-weight-medium);
  }

  .info-value {
    font-size: var(--fs-body-m);
    color: var(--color-text);
  }

  .status {
    text-transform: capitalize;
    font-weight: var(--font-weight-medium);

    &.status-active {
      color: var(--color-red);
    }

    &.status-completed {
      color: #22c55e;
    }

    &.status-experimental {
      color: #f59e0b;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 0 1rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .contributors {
      justify-content: center;
    }
  }
</style>
